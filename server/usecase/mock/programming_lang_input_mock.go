// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/input/programming_lang_input.go

// Package mock_input is a generated GoMock package.
package mock_input

import (
	model "github.com/SekiguchiKai/clean-architecture-with-go/server/domain/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockProgrammingLangInputPort is a mock of ProgrammingLangInputPort interface
type MockProgrammingLangInputPort struct {
	ctrl     *gomock.Controller
	recorder *MockProgrammingLangInputPortMockRecorder
}

// MockProgrammingLangInputPortMockRecorder is the mock recorder for MockProgrammingLangInputPort
type MockProgrammingLangInputPortMockRecorder struct {
	mock *MockProgrammingLangInputPort
}

// NewMockProgrammingLangInputPort creates a new mock instance
func NewMockProgrammingLangInputPort(ctrl *gomock.Controller) *MockProgrammingLangInputPort {
	mock := &MockProgrammingLangInputPort{ctrl: ctrl}
	mock.recorder = &MockProgrammingLangInputPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProgrammingLangInputPort) EXPECT() *MockProgrammingLangInputPortMockRecorder {
	return m.recorder
}

// List mocks base method
func (m *MockProgrammingLangInputPort) List(limit int) ([]*model.ProgrammingLang, error) {
	ret := m.ctrl.Call(m, "List", limit)
	ret0, _ := ret[0].([]*model.ProgrammingLang)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockProgrammingLangInputPortMockRecorder) List(limit interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockProgrammingLangInputPort)(nil).List), limit)
}

// Get mocks base method
func (m *MockProgrammingLangInputPort) Get(id int) (*model.ProgrammingLang, error) {
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*model.ProgrammingLang)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockProgrammingLangInputPortMockRecorder) Get(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProgrammingLangInputPort)(nil).Get), id)
}

// Create mocks base method
func (m *MockProgrammingLangInputPort) Create(param *model.ProgrammingLang) (*model.ProgrammingLang, error) {
	ret := m.ctrl.Call(m, "Create", param)
	ret0, _ := ret[0].(*model.ProgrammingLang)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockProgrammingLangInputPortMockRecorder) Create(param interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProgrammingLangInputPort)(nil).Create), param)
}

// Update mocks base method
func (m *MockProgrammingLangInputPort) Update(param *model.ProgrammingLang) (*model.ProgrammingLang, error) {
	ret := m.ctrl.Call(m, "Update", param)
	ret0, _ := ret[0].(*model.ProgrammingLang)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockProgrammingLangInputPortMockRecorder) Update(param interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProgrammingLangInputPort)(nil).Update), param)
}

// Delete mocks base method
func (m *MockProgrammingLangInputPort) Delete(id int) error {
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockProgrammingLangInputPortMockRecorder) Delete(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProgrammingLangInputPort)(nil).Delete), id)
}
